{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBound = require('call-bind/callBound');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $indexOf = callBound('Array.prototype.indexOf', true) || callBound('String.prototype.indexOf');\nvar $push = callBound('Array.prototype.push');\n\nvar Get = require('./Get');\n\nvar IsArray = require('./IsArray');\n\nvar ToLength = require('./ToLength');\n\nvar ToString = require('./ToString');\n\nvar Type = require('./Type'); // https://ecma-international.org/ecma-262/6.0/#sec-createlistfromarraylike\n\n\nmodule.exports = function CreateListFromArrayLike(obj) {\n  var elementTypes = arguments.length > 1 ? arguments[1] : ['Undefined', 'Null', 'Boolean', 'String', 'Symbol', 'Number', 'Object'];\n\n  if (Type(obj) !== 'Object') {\n    throw new $TypeError('Assertion failed: `obj` must be an Object');\n  }\n\n  if (!IsArray(elementTypes)) {\n    throw new $TypeError('Assertion failed: `elementTypes`, if provided, must be an array');\n  }\n\n  var len = ToLength(Get(obj, 'length'));\n  var list = [];\n  var index = 0;\n\n  while (index < len) {\n    var indexName = ToString(index);\n    var next = Get(obj, indexName);\n    var nextType = Type(next);\n\n    if ($indexOf(elementTypes, nextType) < 0) {\n      throw new $TypeError('item type ' + nextType + ' is not a valid elementType');\n    }\n\n    $push(list, next);\n    index += 1;\n  }\n\n  return list;\n};","map":{"version":3,"sources":["/Users/sumankaranjit/myProfile/resume/node_modules/es-abstract/2018/CreateListFromArrayLike.js"],"names":["GetIntrinsic","require","callBound","$TypeError","$indexOf","$push","Get","IsArray","ToLength","ToString","Type","module","exports","CreateListFromArrayLike","obj","elementTypes","arguments","length","len","list","index","indexName","next","nextType"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAIE,UAAU,GAAGH,YAAY,CAAC,aAAD,CAA7B;AACA,IAAII,QAAQ,GAAGF,SAAS,CAAC,yBAAD,EAA4B,IAA5B,CAAT,IAA8CA,SAAS,CAAC,0BAAD,CAAtE;AACA,IAAIG,KAAK,GAAGH,SAAS,CAAC,sBAAD,CAArB;;AAEA,IAAII,GAAG,GAAGL,OAAO,CAAC,OAAD,CAAjB;;AACA,IAAIM,OAAO,GAAGN,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIO,QAAQ,GAAGP,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIQ,QAAQ,GAAGR,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIS,IAAI,GAAGT,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AACAU,MAAM,CAACC,OAAP,GAAiB,SAASC,uBAAT,CAAiCC,GAAjC,EAAsC;AACtD,MAAIC,YAAY,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAChBD,SAAS,CAAC,CAAD,CADO,GAEhB,CAAC,WAAD,EAAc,MAAd,EAAsB,SAAtB,EAAiC,QAAjC,EAA2C,QAA3C,EAAqD,QAArD,EAA+D,QAA/D,CAFH;;AAIA,MAAIN,IAAI,CAACI,GAAD,CAAJ,KAAc,QAAlB,EAA4B;AAC3B,UAAM,IAAIX,UAAJ,CAAe,2CAAf,CAAN;AACA;;AACD,MAAI,CAACI,OAAO,CAACQ,YAAD,CAAZ,EAA4B;AAC3B,UAAM,IAAIZ,UAAJ,CAAe,iEAAf,CAAN;AACA;;AACD,MAAIe,GAAG,GAAGV,QAAQ,CAACF,GAAG,CAACQ,GAAD,EAAM,QAAN,CAAJ,CAAlB;AACA,MAAIK,IAAI,GAAG,EAAX;AACA,MAAIC,KAAK,GAAG,CAAZ;;AACA,SAAOA,KAAK,GAAGF,GAAf,EAAoB;AACnB,QAAIG,SAAS,GAAGZ,QAAQ,CAACW,KAAD,CAAxB;AACA,QAAIE,IAAI,GAAGhB,GAAG,CAACQ,GAAD,EAAMO,SAAN,CAAd;AACA,QAAIE,QAAQ,GAAGb,IAAI,CAACY,IAAD,CAAnB;;AACA,QAAIlB,QAAQ,CAACW,YAAD,EAAeQ,QAAf,CAAR,GAAmC,CAAvC,EAA0C;AACzC,YAAM,IAAIpB,UAAJ,CAAe,eAAeoB,QAAf,GAA0B,6BAAzC,CAAN;AACA;;AACDlB,IAAAA,KAAK,CAACc,IAAD,EAAOG,IAAP,CAAL;AACAF,IAAAA,KAAK,IAAI,CAAT;AACA;;AACD,SAAOD,IAAP;AACA,CAzBD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBound = require('call-bind/callBound');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $indexOf = callBound('Array.prototype.indexOf', true) || callBound('String.prototype.indexOf');\nvar $push = callBound('Array.prototype.push');\n\nvar Get = require('./Get');\nvar IsArray = require('./IsArray');\nvar ToLength = require('./ToLength');\nvar ToString = require('./ToString');\nvar Type = require('./Type');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-createlistfromarraylike\nmodule.exports = function CreateListFromArrayLike(obj) {\n\tvar elementTypes = arguments.length > 1\n\t\t? arguments[1]\n\t\t: ['Undefined', 'Null', 'Boolean', 'String', 'Symbol', 'Number', 'Object'];\n\n\tif (Type(obj) !== 'Object') {\n\t\tthrow new $TypeError('Assertion failed: `obj` must be an Object');\n\t}\n\tif (!IsArray(elementTypes)) {\n\t\tthrow new $TypeError('Assertion failed: `elementTypes`, if provided, must be an array');\n\t}\n\tvar len = ToLength(Get(obj, 'length'));\n\tvar list = [];\n\tvar index = 0;\n\twhile (index < len) {\n\t\tvar indexName = ToString(index);\n\t\tvar next = Get(obj, indexName);\n\t\tvar nextType = Type(next);\n\t\tif ($indexOf(elementTypes, nextType) < 0) {\n\t\t\tthrow new $TypeError('item type ' + nextType + ' is not a valid elementType');\n\t\t}\n\t\t$push(list, next);\n\t\tindex += 1;\n\t}\n\treturn list;\n};\n"]},"metadata":{},"sourceType":"script"}