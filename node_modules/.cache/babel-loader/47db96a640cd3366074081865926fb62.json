{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('call-bind/callBound');\n\nvar $replace = callBound('String.prototype.replace');\n\nvar RequireObjectCoercible = require('./RequireObjectCoercible');\n\nvar ToString = require('./ToString');\n\nvar Type = require('./Type'); // https://ecma-international.org/ecma-262/6.0/#sec-createhtml\n\n\nmodule.exports = function CreateHTML(string, tag, attribute, value) {\n  if (Type(tag) !== 'String' || Type(attribute) !== 'String') {\n    throw new $TypeError('Assertion failed: `tag` and `attribute` must be strings');\n  }\n\n  var str = RequireObjectCoercible(string);\n  var S = ToString(str);\n  var p1 = '<' + tag;\n\n  if (attribute !== '') {\n    var V = ToString(value);\n    var escapedV = $replace(V, /\\x22/g, '&quot;');\n    p1 += '\\x20' + attribute + '\\x3D\\x22' + escapedV + '\\x22';\n  }\n\n  return p1 + '>' + S + '</' + tag + '>';\n};","map":{"version":3,"sources":["/Users/sumankaranjit/myProfile/resume/node_modules/es-abstract/2018/CreateHTML.js"],"names":["GetIntrinsic","require","$TypeError","callBound","$replace","RequireObjectCoercible","ToString","Type","module","exports","CreateHTML","string","tag","attribute","value","str","S","p1","V","escapedV"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAIG,QAAQ,GAAGD,SAAS,CAAC,0BAAD,CAAxB;;AAEA,IAAIE,sBAAsB,GAAGJ,OAAO,CAAC,0BAAD,CAApC;;AACA,IAAIK,QAAQ,GAAGL,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIM,IAAI,GAAGN,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAO,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,SAAjC,EAA4CC,KAA5C,EAAmD;AACnE,MAAIP,IAAI,CAACK,GAAD,CAAJ,KAAc,QAAd,IAA0BL,IAAI,CAACM,SAAD,CAAJ,KAAoB,QAAlD,EAA4D;AAC3D,UAAM,IAAIX,UAAJ,CAAe,yDAAf,CAAN;AACA;;AACD,MAAIa,GAAG,GAAGV,sBAAsB,CAACM,MAAD,CAAhC;AACA,MAAIK,CAAC,GAAGV,QAAQ,CAACS,GAAD,CAAhB;AACA,MAAIE,EAAE,GAAG,MAAML,GAAf;;AACA,MAAIC,SAAS,KAAK,EAAlB,EAAsB;AACrB,QAAIK,CAAC,GAAGZ,QAAQ,CAACQ,KAAD,CAAhB;AACA,QAAIK,QAAQ,GAAGf,QAAQ,CAACc,CAAD,EAAI,OAAJ,EAAa,QAAb,CAAvB;AACAD,IAAAA,EAAE,IAAI,SAASJ,SAAT,GAAqB,UAArB,GAAkCM,QAAlC,GAA6C,MAAnD;AACA;;AACD,SAAOF,EAAE,GAAG,GAAL,GAAWD,CAAX,GAAe,IAAf,GAAsBJ,GAAtB,GAA4B,GAAnC;AACA,CAbD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('call-bind/callBound');\n\nvar $replace = callBound('String.prototype.replace');\n\nvar RequireObjectCoercible = require('./RequireObjectCoercible');\nvar ToString = require('./ToString');\nvar Type = require('./Type');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-createhtml\n\nmodule.exports = function CreateHTML(string, tag, attribute, value) {\n\tif (Type(tag) !== 'String' || Type(attribute) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `tag` and `attribute` must be strings');\n\t}\n\tvar str = RequireObjectCoercible(string);\n\tvar S = ToString(str);\n\tvar p1 = '<' + tag;\n\tif (attribute !== '') {\n\t\tvar V = ToString(value);\n\t\tvar escapedV = $replace(V, /\\x22/g, '&quot;');\n\t\tp1 += '\\x20' + attribute + '\\x3D\\x22' + escapedV + '\\x22';\n\t}\n\treturn p1 + '>' + S + '</' + tag + '>';\n};\n"]},"metadata":{},"sourceType":"script"}