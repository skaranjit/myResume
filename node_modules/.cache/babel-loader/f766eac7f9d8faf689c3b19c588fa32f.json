{"ast":null,"code":"'use strict';\n\nvar abs = require('./abs');\n\nvar floor = require('./floor');\n\nvar modulo = require('./modulo');\n\nvar ToNumber = require('./ToNumber');\n\nvar $isNaN = require('../helpers/isNaN');\n\nvar $isFinite = require('../helpers/isFinite');\n\nvar $sign = require('../helpers/sign'); // http://262.ecma-international.org/5.1/#sec-9.7\n\n\nmodule.exports = function ToUint16(value) {\n  var number = ToNumber(value);\n\n  if ($isNaN(number) || number === 0 || !$isFinite(number)) {\n    return 0;\n  }\n\n  var posInt = $sign(number) * floor(abs(number));\n  return modulo(posInt, 0x10000);\n};","map":{"version":3,"sources":["/Users/sumankaranjit/myProfile/resume/node_modules/es-abstract/2018/ToUint16.js"],"names":["abs","require","floor","modulo","ToNumber","$isNaN","$isFinite","$sign","module","exports","ToUint16","value","number","posInt"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAjB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAtB;;AAEA,IAAII,MAAM,GAAGJ,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIK,SAAS,GAAGL,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIM,KAAK,GAAGN,OAAO,CAAC,iBAAD,CAAnB,C,CAEA;;;AAEAO,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACzC,MAAIC,MAAM,GAAGR,QAAQ,CAACO,KAAD,CAArB;;AACA,MAAIN,MAAM,CAACO,MAAD,CAAN,IAAkBA,MAAM,KAAK,CAA7B,IAAkC,CAACN,SAAS,CAACM,MAAD,CAAhD,EAA0D;AAAE,WAAO,CAAP;AAAW;;AACvE,MAAIC,MAAM,GAAGN,KAAK,CAACK,MAAD,CAAL,GAAgBV,KAAK,CAACF,GAAG,CAACY,MAAD,CAAJ,CAAlC;AACA,SAAOT,MAAM,CAACU,MAAD,EAAS,OAAT,CAAb;AACA,CALD","sourcesContent":["'use strict';\n\nvar abs = require('./abs');\nvar floor = require('./floor');\nvar modulo = require('./modulo');\nvar ToNumber = require('./ToNumber');\n\nvar $isNaN = require('../helpers/isNaN');\nvar $isFinite = require('../helpers/isFinite');\nvar $sign = require('../helpers/sign');\n\n// http://262.ecma-international.org/5.1/#sec-9.7\n\nmodule.exports = function ToUint16(value) {\n\tvar number = ToNumber(value);\n\tif ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }\n\tvar posInt = $sign(number) * floor(abs(number));\n\treturn modulo(posInt, 0x10000);\n};\n"]},"metadata":{},"sourceType":"script"}