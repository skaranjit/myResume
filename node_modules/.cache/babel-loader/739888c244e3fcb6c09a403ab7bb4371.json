{"ast":null,"code":"'use strict';\n\nvar ToNumber = require('./ToNumber');\n\nvar $isNaN = require('../helpers/isNaN');\n\nvar $isFinite = require('../helpers/isFinite');\n\nvar $sign = require('../helpers/sign');\n\nvar abs = require('./abs');\n\nvar floor = require('./floor');\n\nvar modulo = require('./modulo'); // https://ecma-international.org/ecma-262/6.0/#sec-touint8\n\n\nmodule.exports = function ToUint8(argument) {\n  var number = ToNumber(argument);\n\n  if ($isNaN(number) || number === 0 || !$isFinite(number)) {\n    return 0;\n  }\n\n  var posInt = $sign(number) * floor(abs(number));\n  return modulo(posInt, 0x100);\n};","map":{"version":3,"sources":["/Users/sumankaranjit/myProfile/resume/node_modules/es-abstract/2018/ToUint8.js"],"names":["ToNumber","require","$isNaN","$isFinite","$sign","abs","floor","modulo","module","exports","ToUint8","argument","number","posInt"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,iBAAD,CAAnB;;AAEA,IAAII,GAAG,GAAGJ,OAAO,CAAC,OAAD,CAAjB;;AACA,IAAIK,KAAK,GAAGL,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIM,MAAM,GAAGN,OAAO,CAAC,UAAD,CAApB,C,CAEA;;;AAEAO,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,QAAjB,EAA2B;AAC3C,MAAIC,MAAM,GAAGZ,QAAQ,CAACW,QAAD,CAArB;;AACA,MAAIT,MAAM,CAACU,MAAD,CAAN,IAAkBA,MAAM,KAAK,CAA7B,IAAkC,CAACT,SAAS,CAACS,MAAD,CAAhD,EAA0D;AAAE,WAAO,CAAP;AAAW;;AACvE,MAAIC,MAAM,GAAGT,KAAK,CAACQ,MAAD,CAAL,GAAgBN,KAAK,CAACD,GAAG,CAACO,MAAD,CAAJ,CAAlC;AACA,SAAOL,MAAM,CAACM,MAAD,EAAS,KAAT,CAAb;AACA,CALD","sourcesContent":["'use strict';\n\nvar ToNumber = require('./ToNumber');\n\nvar $isNaN = require('../helpers/isNaN');\nvar $isFinite = require('../helpers/isFinite');\nvar $sign = require('../helpers/sign');\n\nvar abs = require('./abs');\nvar floor = require('./floor');\nvar modulo = require('./modulo');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-touint8\n\nmodule.exports = function ToUint8(argument) {\n\tvar number = ToNumber(argument);\n\tif ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }\n\tvar posInt = $sign(number) * floor(abs(number));\n\treturn modulo(posInt, 0x100);\n};\n"]},"metadata":{},"sourceType":"script"}