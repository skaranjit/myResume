{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar isPrefixOf = require('../helpers/isPrefixOf'); // var callBound = require('call-bind/callBound');\n// var $charAt = callBound('String.prototype.charAt');\n\n\nvar Type = require('./Type'); // https://262.ecma-international.org/9.0/#sec-isstringprefix\n\n\nmodule.exports = function IsStringPrefix(p, q) {\n  if (Type(p) !== 'String') {\n    throw new $TypeError('Assertion failed: \"p\" must be a String');\n  }\n\n  if (Type(q) !== 'String') {\n    throw new $TypeError('Assertion failed: \"q\" must be a String');\n  }\n\n  return isPrefixOf(p, q);\n  /*\n  if (p === q || p === '') {\n  \treturn true;\n  }\n  \tvar pLength = p.length;\n  var qLength = q.length;\n  if (pLength >= qLength) {\n  \treturn false;\n  }\n  \t// assert: pLength < qLength\n  \tfor (var i = 0; i < pLength; i += 1) {\n  \tif ($charAt(p, i) !== $charAt(q, i)) {\n  \t\treturn false;\n  \t}\n  }\n  return true;\n  */\n};","map":{"version":3,"sources":["/Users/sumankaranjit/myProfile/resume/node_modules/es-abstract/2018/IsStringPrefix.js"],"names":["GetIntrinsic","require","$TypeError","isPrefixOf","Type","module","exports","IsStringPrefix","p","q"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,UAAU,GAAGF,OAAO,CAAC,uBAAD,CAAxB,C,CAEA;AAEA;;;AAEA,IAAIG,IAAI,GAAGH,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;AAC9C,MAAIL,IAAI,CAACI,CAAD,CAAJ,KAAY,QAAhB,EAA0B;AACzB,UAAM,IAAIN,UAAJ,CAAe,wCAAf,CAAN;AACA;;AAED,MAAIE,IAAI,CAACK,CAAD,CAAJ,KAAY,QAAhB,EAA0B;AACzB,UAAM,IAAIP,UAAJ,CAAe,wCAAf,CAAN;AACA;;AAED,SAAOC,UAAU,CAACK,CAAD,EAAIC,CAAJ,CAAjB;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIC,CA9BD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar isPrefixOf = require('../helpers/isPrefixOf');\n\n// var callBound = require('call-bind/callBound');\n\n// var $charAt = callBound('String.prototype.charAt');\n\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/9.0/#sec-isstringprefix\n\nmodule.exports = function IsStringPrefix(p, q) {\n\tif (Type(p) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: \"p\" must be a String');\n\t}\n\n\tif (Type(q) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: \"q\" must be a String');\n\t}\n\n\treturn isPrefixOf(p, q);\n\t/*\n\tif (p === q || p === '') {\n\t\treturn true;\n\t}\n\n\tvar pLength = p.length;\n\tvar qLength = q.length;\n\tif (pLength >= qLength) {\n\t\treturn false;\n\t}\n\n\t// assert: pLength < qLength\n\n\tfor (var i = 0; i < pLength; i += 1) {\n\t\tif ($charAt(p, i) !== $charAt(q, i)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\t*/\n};\n"]},"metadata":{},"sourceType":"script"}