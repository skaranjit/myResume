{"ast":null,"code":"var _jsxFileName = \"/Users/sumankaranjit/myProfile/resume/src/pages/Profile.js\";\n// import { request } from \"dom-helpers/cjs/animationFrame\";\nimport React, { Component, ReactPropTypes, useRef } from \"react\"; // import Canvas from \"./../components/canvas\";\n// import ReactDOM from \"react-dom\";\n// import { WindowsBalloon } from \"node-notifier\";\n// class Profile extends Component {\n//   componentDidMount() {\n//     ReactDOM.findDOMNode(this).addEventListener(\"scroll\", this.updateCanvas());\n//   }\n//   handleScrollEvent() {\n//     const canvas = document.querySelector(\"canvas\");\n//     const html = document.getElementById(\"root\");\n//     const frameCount = 147;\n//     canvas.width = 1158;\n//     canvas.height = 770;\n//     const ctx = canvas.getContext(\"2d\");\n//     var imageObj1 = new Image();\n//     const scrollTop = html.scrollTop;\n//     const maxScrollTop = window.innerHeight - html.scrollHeight;\n//     const scrollFraction = scrollTop / maxScrollTop;\n//     const frameIndex = Math.min(\n//       frameCount - 1,\n//       Math.floor(scrollFraction * frameCount)\n//     );\n//     requestAnimationFrame(() =>\n//       this.updateImage(imageObj1, frameIndex + 1, ctx)\n//     );\n//     console.log(scrollTop, maxScrollTop, frameIndex);\n//   }\n//   getImage(index) {\n//     return (\n//       \"https://www.apple.com/105/media/us/airpods-pro/2019/1299e2f5_9206_4470_b28e_08307a42f19b/anim/sequence/large/01-hero-lightpass/000\" +\n//       index +\n//       \".jpg\"\n//     );\n//   }\n//   updateImage(imgObj, index, ctx) {\n//     imgObj.src = this.getImage(index);\n//     ctx.drawImage(imgObj, 0, 20);\n//   }\n//   updateCanvas() {\n//     const canvas = document.querySelector(\"canvas\");\n//     const html = document.getElementById(\"root\");\n//     const frameCount = 147;\n//     canvas.width = 1158;\n//     canvas.height = 770;\n//     const ctx = canvas.getContext(\"2d\");\n//     var imageObj1 = new Image();\n//     imageObj1.src = this.getImage(1);\n//     imageObj1.onload = function () {\n//       ctx.drawImage(imageObj1, 0, 0);\n//     };\n//     const scrollTop = document.body.scrollTop;\n//     const maxScrollTop = html.scrollHeight - window.innerHeight;\n//     const scrollFraction = scrollTop / maxScrollTop;\n//     const frameIndex = Math.min(\n//       frameCount - 1,\n//       Math.floor(scrollFraction * frameCount)\n//     );\n//     requestAnimationFrame(() =>\n//       this.updateImage(imageObj1, frameIndex + 1, ctx)\n//     );\n//     console.log(scrollTop, maxScrollTop, frameIndex);\n//     // this.updateImage(imageObj1, frameIndex + 1, ctx);\n//     // imageObj1.onload = function () {\n//     //   ctx.drawImage(imageObj1, 20, 20);\n//     // };\n//     // window.addEventListener(\"scroll\", () => {\n//     //   const scrollTop = html.scrollTop;\n//     //   const maxScrollTop = html.scrollHeight - window.innerHeight;\n//     //   const scrollFraction = scrollTop / maxScrollTop;\n//     //   const frameIndex = Math.min(\n//     //     frameCount - 1,\n//     //     Math.floor(scrollFraction * frameCount)\n//     //   );\n//     //   console.log(maxScrollTop);\n//     // });\n//   }\n//   //   const draw = (ctx, frameCount) => {\n//   // const html = document.documentElement;\n//   // const canvas = document.createElement(\"canvas\");\n//   // const ctx = canvas.id(\"profile\");\n//   // const context = canvas.getContext(\"2d\");\n//   // canvas.width = 1158;\n//   // canvas.height =1000;\n//   // // canvas.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n//   // // ctx.beginPath();\n//   // // ctx.fill();\n//   // const img = new Image();\n//   // img.src = currentFrame(1);\n//   // img.onload = function () {\n//   //   context.drawImage(img, 0, 0);\n//   // };\n//   // const updateImage = (index) => {\n//   //   img.src = currentFrame(index);\n//   //   ctx.drawImage(img, 0, 0);\n//   // };\n//   //   requestAnimationFrame(() => updateImage(frameCount + 1));\n//   //   console.log(maxScrollTop);\n//   // });\n//   //};\n//   render() {\n//     return <canvas ref=\"canvas\"></canvas>;\n//   }\n// }\n// export default Profile;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  }\n\n  componentDidUpdate() {\n    // Draws a square in the middle of the canvas rotated\n    // around the centre by this.props.angle\n    const {\n      angle\n    } = this.props;\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const width = canvas.width;\n    const height = canvas.height;\n    ctx.save();\n    ctx.beginPath();\n    ctx.clearRect(0, 0, width, height);\n    ctx.translate(width / 2, height / 2);\n    ctx.rotate(angle * Math.PI / 180);\n    ctx.fillStyle = \"#4397AC\";\n    ctx.fillRect(-width / 4, -height / 4, width / 2, height / 2);\n    ctx.restore();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: \"300\",\n        height: \"300\",\n        ref: this.canvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Profile;","map":{"version":3,"sources":["/Users/sumankaranjit/myProfile/resume/src/pages/Profile.js"],"names":["React","Component","ReactPropTypes","useRef","Profile","constructor","props","canvasRef","createRef","componentDidMount","canvas","current","context","getContext","fillRect","width","height","componentDidUpdate","angle","ctx","save","beginPath","clearRect","translate","rotate","Math","PI","fillStyle","restore","render"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,cAA3B,EAA2CC,MAA3C,QAAyD,OAAzsBJ,KAAK,CAACC,SAA5B,CAAsC;AACpCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,SAAL,gBAAiBP,KAAK,CAACQ,SAAN,EAAjB;AACD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,MAAM,GAAG,KAAKH,SAAL,CAAeI,OAA9B;AACA,UAAMC,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAhB;AACAD,IAAAA,OAAO,CAACE,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBJ,MAAM,CAACK,KAA9B,EAAqCL,MAAM,CAACM,MAA5C;AACD;;AACDC,EAAAA,kBAAkB,GAAG;AACnB;AACA;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKZ,KAAvB;AACA,UAAMI,MAAM,GAAG,KAAKH,SAAL,CAAeI,OAA9B;AACA,UAAMQ,GAAG,GAAGT,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAZ;AACA,UAAME,KAAK,GAAGL,MAAM,CAACK,KAArB;AACA,UAAMC,MAAM,GAAGN,MAAM,CAACM,MAAtB;AACAG,IAAAA,GAAG,CAACC,IAAJ;AACAD,IAAAA,GAAG,CAACE,SAAJ;AACAF,IAAAA,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBP,KAApB,EAA2BC,MAA3B;AACAG,IAAAA,GAAG,CAACI,SAAJ,CAAcR,KAAK,GAAG,CAAtB,EAAyBC,MAAM,GAAG,CAAlC;AACAG,IAAAA,GAAG,CAACK,MAAJ,CAAYN,KAAK,GAAGO,IAAI,CAACC,EAAd,GAAoB,GAA/B;AACAP,IAAAA,GAAG,CAACQ,SAAJ,GAAgB,SAAhB;AACAR,IAAAA,GAAG,CAACL,QAAJ,CAAa,CAACC,KAAD,GAAS,CAAtB,EAAyB,CAACC,MAAD,GAAU,CAAnC,EAAsCD,KAAK,GAAG,CAA9C,EAAiDC,MAAM,GAAG,CAA1D;AACAG,IAAAA,GAAG,CAACS,OAAJ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAQ,QAAA,KAAK,EAAC,KAAd;AAAoB,QAAA,MAAM,EAAC,KAA3B;AAAiC,QAAA,GAAG,EAAE,KAAKtB;AAA3C;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAlCmC;;AAoCtC,eAAeH,OAAf","sourcesContent":["// import { request } from \"dom-helpers/cjs/animationFrame\";\nimport React, { Component, ReactPropTypes, useRef } from \"react\";\n// import Canvas from \"./../components/canvas\";\n// import ReactDOM from \"react-dom\";\n// import { WindowsBalloon } from \"node-notifier\";\n\n// class Profile extends Component {\n//   componentDidMount() {\n//     ReactDOM.findDOMNode(this).addEventListener(\"scroll\", this.updateCanvas());\n//   }\n//   handleScrollEvent() {\n//     const canvas = document.querySelector(\"canvas\");\n//     const html = document.getElementById(\"root\");\n//     const frameCount = 147;\n//     canvas.width = 1158;\n//     canvas.height = 770;\n//     const ctx = canvas.getContext(\"2d\");\n//     var imageObj1 = new Image();\n\n//     const scrollTop = html.scrollTop;\n//     const maxScrollTop = window.innerHeight - html.scrollHeight;\n//     const scrollFraction = scrollTop / maxScrollTop;\n//     const frameIndex = Math.min(\n//       frameCount - 1,\n//       Math.floor(scrollFraction * frameCount)\n//     );\n//     requestAnimationFrame(() =>\n//       this.updateImage(imageObj1, frameIndex + 1, ctx)\n//     );\n//     console.log(scrollTop, maxScrollTop, frameIndex);\n//   }\n//   getImage(index) {\n//     return (\n//       \"https://www.apple.com/105/media/us/airpods-pro/2019/1299e2f5_9206_4470_b28e_08307a42f19b/anim/sequence/large/01-hero-lightpass/000\" +\n//       index +\n//       \".jpg\"\n//     );\n//   }\n//   updateImage(imgObj, index, ctx) {\n//     imgObj.src = this.getImage(index);\n//     ctx.drawImage(imgObj, 0, 20);\n//   }\n\n//   updateCanvas() {\n//     const canvas = document.querySelector(\"canvas\");\n//     const html = document.getElementById(\"root\");\n//     const frameCount = 147;\n//     canvas.width = 1158;\n//     canvas.height = 770;\n//     const ctx = canvas.getContext(\"2d\");\n//     var imageObj1 = new Image();\n//     imageObj1.src = this.getImage(1);\n//     imageObj1.onload = function () {\n//       ctx.drawImage(imageObj1, 0, 0);\n//     };\n//     const scrollTop = document.body.scrollTop;\n//     const maxScrollTop = html.scrollHeight - window.innerHeight;\n//     const scrollFraction = scrollTop / maxScrollTop;\n//     const frameIndex = Math.min(\n//       frameCount - 1,\n//       Math.floor(scrollFraction * frameCount)\n//     );\n//     requestAnimationFrame(() =>\n//       this.updateImage(imageObj1, frameIndex + 1, ctx)\n//     );\n//     console.log(scrollTop, maxScrollTop, frameIndex);\n//     // this.updateImage(imageObj1, frameIndex + 1, ctx);\n\n//     // imageObj1.onload = function () {\n//     //   ctx.drawImage(imageObj1, 20, 20);\n//     // };\n//     // window.addEventListener(\"scroll\", () => {\n//     //   const scrollTop = html.scrollTop;\n//     //   const maxScrollTop = html.scrollHeight - window.innerHeight;\n//     //   const scrollFraction = scrollTop / maxScrollTop;\n//     //   const frameIndex = Math.min(\n//     //     frameCount - 1,\n//     //     Math.floor(scrollFraction * frameCount)\n//     //   );\n\n//     //   console.log(maxScrollTop);\n//     // });\n//   }\n\n//   //   const draw = (ctx, frameCount) => {\n\n//   // const html = document.documentElement;\n//   // const canvas = document.createElement(\"canvas\");\n//   // const ctx = canvas.id(\"profile\");\n//   // const context = canvas.getContext(\"2d\");\n//   // canvas.width = 1158;\n//   // canvas.height =1000;\n//   // // canvas.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n//   // // ctx.beginPath();\n//   // // ctx.fill();\n//   // const img = new Image();\n//   // img.src = currentFrame(1);\n//   // img.onload = function () {\n//   //   context.drawImage(img, 0, 0);\n//   // };\n//   // const updateImage = (index) => {\n//   //   img.src = currentFrame(index);\n//   //   ctx.drawImage(img, 0, 0);\n//   // };\n\n//   //   requestAnimationFrame(() => updateImage(frameCount + 1));\n//   //   console.log(maxScrollTop);\n//   // });\n//   //};\n\n//   render() {\n//     return <canvas ref=\"canvas\"></canvas>;\n//   }\n// }\n\n// export default Profile;\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  }\n  componentDidUpdate() {\n    // Draws a square in the middle of the canvas rotated\n    // around the centre by this.props.angle\n    const { angle } = this.props;\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const width = canvas.width;\n    const height = canvas.height;\n    ctx.save();\n    ctx.beginPath();\n    ctx.clearRect(0, 0, width, height);\n    ctx.translate(width / 2, height / 2);\n    ctx.rotate((angle * Math.PI) / 180);\n    ctx.fillStyle = \"#4397AC\";\n    ctx.fillRect(-width / 4, -height / 4, width / 2, height / 2);\n    ctx.restore();\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas width=\"300\" height=\"300\" ref={this.canvasRef} />;\n      </div>\n    );\n  }\n}\nexport default Profile;\n"]},"metadata":{},"sourceType":"module"}