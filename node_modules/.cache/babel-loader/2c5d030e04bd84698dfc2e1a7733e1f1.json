{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBound = require('call-bind/callBound');\n\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar getGlobalSymbolDescription = GetIntrinsic('%Symbol.keyFor%', true);\nvar thisSymbolValue = callBound('%Symbol.prototype.valueOf%', true);\nvar symToStr = callBound('Symbol.prototype.toString', true);\n\nvar getInferredName = require('./getInferredName');\n/* eslint-disable consistent-return */\n\n\nmodule.exports = callBound('%Symbol.prototype.description%', true) || function getSymbolDescription(symbol) {\n  if (!thisSymbolValue) {\n    throw new $SyntaxError('Symbols are not supported in this environment');\n  } // will throw if not a symbol primitive or wrapper object\n\n\n  var sym = thisSymbolValue(symbol);\n\n  if (getInferredName) {\n    var name = getInferredName(sym);\n\n    if (name === '') {\n      return;\n    }\n\n    return name.slice(1, -1); // name.slice('['.length, -']'.length);\n  }\n\n  var desc;\n\n  if (getGlobalSymbolDescription) {\n    desc = getGlobalSymbolDescription(sym);\n\n    if (typeof desc === 'string') {\n      return desc;\n    }\n  }\n\n  desc = symToStr(sym).slice(7, -1); // str.slice('Symbol('.length, -')'.length);\n\n  if (desc) {\n    return desc;\n  }\n};","map":{"version":3,"sources":["/Users/sumankaranjit/myProfile/resume/node_modules/es-abstract/helpers/getSymbolDescription.js"],"names":["GetIntrinsic","require","callBound","$SyntaxError","getGlobalSymbolDescription","thisSymbolValue","symToStr","getInferredName","module","exports","getSymbolDescription","symbol","sym","name","slice","desc"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAIE,YAAY,GAAGH,YAAY,CAAC,eAAD,CAA/B;AACA,IAAII,0BAA0B,GAAGJ,YAAY,CAAC,iBAAD,EAAoB,IAApB,CAA7C;AACA,IAAIK,eAAe,GAAGH,SAAS,CAAC,4BAAD,EAA+B,IAA/B,CAA/B;AACA,IAAII,QAAQ,GAAGJ,SAAS,CAAC,2BAAD,EAA8B,IAA9B,CAAxB;;AAEA,IAAIK,eAAe,GAAGN,OAAO,CAAC,mBAAD,CAA7B;AAEA;;;AACAO,MAAM,CAACC,OAAP,GAAiBP,SAAS,CAAC,gCAAD,EAAmC,IAAnC,CAAT,IAAqD,SAASQ,oBAAT,CAA8BC,MAA9B,EAAsC;AAC3G,MAAI,CAACN,eAAL,EAAsB;AACrB,UAAM,IAAIF,YAAJ,CAAiB,+CAAjB,CAAN;AACA,GAH0G,CAK3G;;;AACA,MAAIS,GAAG,GAAGP,eAAe,CAACM,MAAD,CAAzB;;AAEA,MAAIJ,eAAJ,EAAqB;AACpB,QAAIM,IAAI,GAAGN,eAAe,CAACK,GAAD,CAA1B;;AACA,QAAIC,IAAI,KAAK,EAAb,EAAiB;AAAE;AAAS;;AAC5B,WAAOA,IAAI,CAACC,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP,CAHoB,CAGM;AAC1B;;AAED,MAAIC,IAAJ;;AACA,MAAIX,0BAAJ,EAAgC;AAC/BW,IAAAA,IAAI,GAAGX,0BAA0B,CAACQ,GAAD,CAAjC;;AACA,QAAI,OAAOG,IAAP,KAAgB,QAApB,EAA8B;AAC7B,aAAOA,IAAP;AACA;AACD;;AAEDA,EAAAA,IAAI,GAAGT,QAAQ,CAACM,GAAD,CAAR,CAAcE,KAAd,CAAoB,CAApB,EAAuB,CAAC,CAAxB,CAAP,CAtB2G,CAsBxE;;AACnC,MAAIC,IAAJ,EAAU;AACT,WAAOA,IAAP;AACA;AACD,CA1BD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBound = require('call-bind/callBound');\n\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar getGlobalSymbolDescription = GetIntrinsic('%Symbol.keyFor%', true);\nvar thisSymbolValue = callBound('%Symbol.prototype.valueOf%', true);\nvar symToStr = callBound('Symbol.prototype.toString', true);\n\nvar getInferredName = require('./getInferredName');\n\n/* eslint-disable consistent-return */\nmodule.exports = callBound('%Symbol.prototype.description%', true) || function getSymbolDescription(symbol) {\n\tif (!thisSymbolValue) {\n\t\tthrow new $SyntaxError('Symbols are not supported in this environment');\n\t}\n\n\t// will throw if not a symbol primitive or wrapper object\n\tvar sym = thisSymbolValue(symbol);\n\n\tif (getInferredName) {\n\t\tvar name = getInferredName(sym);\n\t\tif (name === '') { return; }\n\t\treturn name.slice(1, -1); // name.slice('['.length, -']'.length);\n\t}\n\n\tvar desc;\n\tif (getGlobalSymbolDescription) {\n\t\tdesc = getGlobalSymbolDescription(sym);\n\t\tif (typeof desc === 'string') {\n\t\t\treturn desc;\n\t\t}\n\t}\n\n\tdesc = symToStr(sym).slice(7, -1); // str.slice('Symbol('.length, -')'.length);\n\tif (desc) {\n\t\treturn desc;\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}