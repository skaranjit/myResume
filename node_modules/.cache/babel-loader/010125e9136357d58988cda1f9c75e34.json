{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $fromCharCode = GetIntrinsic('%String.fromCharCode%');\n\nvar floor = require('./floor');\n\nvar modulo = require('./modulo');\n\nvar isCodePoint = require('../helpers/isCodePoint'); // https://262.ecma-international.org/7.0/#sec-utf16encoding\n\n\nmodule.exports = function UTF16Encoding(cp) {\n  if (!isCodePoint(cp)) {\n    throw new $TypeError('Assertion failed: `cp` must be >= 0 and <= 0x10FFFF');\n  }\n\n  if (cp <= 65535) {\n    return $fromCharCode(cp);\n  }\n\n  var cu1 = floor((cp - 65536) / 1024) + 0xD800;\n  var cu2 = modulo(cp - 65536, 1024) + 0xDC00;\n  return $fromCharCode(cu1) + $fromCharCode(cu2);\n};","map":{"version":3,"sources":["/Users/sumankaranjit/myProfile/resume/node_modules/es-abstract/2018/UTF16Encoding.js"],"names":["GetIntrinsic","require","$TypeError","$fromCharCode","floor","modulo","isCodePoint","module","exports","UTF16Encoding","cp","cu1","cu2"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;AACA,IAAIG,aAAa,GAAGH,YAAY,CAAC,uBAAD,CAAhC;;AAEA,IAAII,KAAK,GAAGH,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAII,MAAM,GAAGJ,OAAO,CAAC,UAAD,CAApB;;AAEA,IAAIK,WAAW,GAAGL,OAAO,CAAC,wBAAD,CAAzB,C,CAEA;;;AAEAM,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,EAAvB,EAA2B;AAC3C,MAAI,CAACJ,WAAW,CAACI,EAAD,CAAhB,EAAsB;AACrB,UAAM,IAAIR,UAAJ,CAAe,qDAAf,CAAN;AACA;;AACD,MAAIQ,EAAE,IAAI,KAAV,EAAiB;AAChB,WAAOP,aAAa,CAACO,EAAD,CAApB;AACA;;AACD,MAAIC,GAAG,GAAGP,KAAK,CAAC,CAACM,EAAE,GAAG,KAAN,IAAe,IAAhB,CAAL,GAA6B,MAAvC;AACA,MAAIE,GAAG,GAAGP,MAAM,CAACK,EAAE,GAAG,KAAN,EAAa,IAAb,CAAN,GAA2B,MAArC;AACA,SAAOP,aAAa,CAACQ,GAAD,CAAb,GAAqBR,aAAa,CAACS,GAAD,CAAzC;AACA,CAVD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $fromCharCode = GetIntrinsic('%String.fromCharCode%');\n\nvar floor = require('./floor');\nvar modulo = require('./modulo');\n\nvar isCodePoint = require('../helpers/isCodePoint');\n\n// https://262.ecma-international.org/7.0/#sec-utf16encoding\n\nmodule.exports = function UTF16Encoding(cp) {\n\tif (!isCodePoint(cp)) {\n\t\tthrow new $TypeError('Assertion failed: `cp` must be >= 0 and <= 0x10FFFF');\n\t}\n\tif (cp <= 65535) {\n\t\treturn $fromCharCode(cp);\n\t}\n\tvar cu1 = floor((cp - 65536) / 1024) + 0xD800;\n\tvar cu2 = modulo(cp - 65536, 1024) + 0xDC00;\n\treturn $fromCharCode(cu1) + $fromCharCode(cu2);\n};\n"]},"metadata":{},"sourceType":"script"}