{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar DefinePropertyOrThrow = require('./DefinePropertyOrThrow');\n\nvar HasOwnProperty = require('./HasOwnProperty');\n\nvar IsExtensible = require('./IsExtensible');\n\nvar IsInteger = require('./IsInteger');\n\nvar Type = require('./Type'); // https://262.ecma-international.org/9.0/#sec-setfunctionlength\n\n\nmodule.exports = function SetFunctionLength(F, length) {\n  if (typeof F !== 'function' || !IsExtensible(F) || HasOwnProperty(F, 'length')) {\n    throw new $TypeError('Assertion failed: `F` must be an extensible function and lack an own `length` property');\n  }\n\n  if (Type(length) !== 'Number') {\n    throw new $TypeError('Assertion failed: `length` must be a Number');\n  }\n\n  if (length < 0 || !IsInteger(length)) {\n    throw new $TypeError('Assertion failed: `length` must be an integer >= 0');\n  }\n\n  return DefinePropertyOrThrow(F, 'length', {\n    '[[Configurable]]': true,\n    '[[Enumerable]]': false,\n    '[[Value]]': length,\n    '[[Writable]]': false\n  });\n};","map":{"version":3,"sources":["/Users/sumankaranjit/myProfile/resume/node_modules/es-abstract/2018/SetFunctionLength.js"],"names":["GetIntrinsic","require","$TypeError","DefinePropertyOrThrow","HasOwnProperty","IsExtensible","IsInteger","Type","module","exports","SetFunctionLength","F","length"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,qBAAqB,GAAGF,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIG,cAAc,GAAGH,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAII,YAAY,GAAGJ,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIK,SAAS,GAAGL,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIM,IAAI,GAAGN,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAO,MAAM,CAACC,OAAP,GAAiB,SAASC,iBAAT,CAA2BC,CAA3B,EAA8BC,MAA9B,EAAsC;AACtD,MAAI,OAAOD,CAAP,KAAa,UAAb,IAA2B,CAACN,YAAY,CAACM,CAAD,CAAxC,IAA+CP,cAAc,CAACO,CAAD,EAAI,QAAJ,CAAjE,EAAgF;AAC/E,UAAM,IAAIT,UAAJ,CAAe,wFAAf,CAAN;AACA;;AACD,MAAIK,IAAI,CAACK,MAAD,CAAJ,KAAiB,QAArB,EAA+B;AAC9B,UAAM,IAAIV,UAAJ,CAAe,6CAAf,CAAN;AACA;;AACD,MAAIU,MAAM,GAAG,CAAT,IAAc,CAACN,SAAS,CAACM,MAAD,CAA5B,EAAsC;AACrC,UAAM,IAAIV,UAAJ,CAAe,oDAAf,CAAN;AACA;;AACD,SAAOC,qBAAqB,CAACQ,CAAD,EAAI,QAAJ,EAAc;AACzC,wBAAoB,IADqB;AAEzC,sBAAkB,KAFuB;AAGzC,iBAAaC,MAH4B;AAIzC,oBAAgB;AAJyB,GAAd,CAA5B;AAMA,CAhBD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar DefinePropertyOrThrow = require('./DefinePropertyOrThrow');\nvar HasOwnProperty = require('./HasOwnProperty');\nvar IsExtensible = require('./IsExtensible');\nvar IsInteger = require('./IsInteger');\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/9.0/#sec-setfunctionlength\n\nmodule.exports = function SetFunctionLength(F, length) {\n\tif (typeof F !== 'function' || !IsExtensible(F) || HasOwnProperty(F, 'length')) {\n\t\tthrow new $TypeError('Assertion failed: `F` must be an extensible function and lack an own `length` property');\n\t}\n\tif (Type(length) !== 'Number') {\n\t\tthrow new $TypeError('Assertion failed: `length` must be a Number');\n\t}\n\tif (length < 0 || !IsInteger(length)) {\n\t\tthrow new $TypeError('Assertion failed: `length` must be an integer >= 0');\n\t}\n\treturn DefinePropertyOrThrow(F, 'length', {\n\t\t'[[Configurable]]': true,\n\t\t'[[Enumerable]]': false,\n\t\t'[[Value]]': length,\n\t\t'[[Writable]]': false\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}