{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('call-bind/callBound');\n\nvar forEach = require('../helpers/forEach');\n\nvar OwnPropertyKeys = require('../helpers/OwnPropertyKeys');\n\nvar $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');\n\nvar CreateDataProperty = require('./CreateDataProperty');\n\nvar Get = require('./Get');\n\nvar IsArray = require('./IsArray');\n\nvar IsInteger = require('./IsInteger');\n\nvar IsPropertyKey = require('./IsPropertyKey');\n\nvar SameValue = require('./SameValue');\n\nvar ToNumber = require('./ToNumber');\n\nvar ToObject = require('./ToObject');\n\nvar Type = require('./Type'); // https://262.ecma-international.org/9.0/#sec-copydataproperties\n\n\nmodule.exports = function CopyDataProperties(target, source, excludedItems) {\n  if (Type(target) !== 'Object') {\n    throw new $TypeError('Assertion failed: \"target\" must be an Object');\n  }\n\n  if (!IsArray(excludedItems)) {\n    throw new $TypeError('Assertion failed: \"excludedItems\" must be a List of Property Keys');\n  }\n\n  for (var i = 0; i < excludedItems.length; i += 1) {\n    if (!IsPropertyKey(excludedItems[i])) {\n      throw new $TypeError('Assertion failed: \"excludedItems\" must be a List of Property Keys');\n    }\n  }\n\n  if (typeof source === 'undefined' || source === null) {\n    return target;\n  }\n\n  var fromObj = ToObject(source);\n  var sourceKeys = OwnPropertyKeys(fromObj);\n  forEach(sourceKeys, function (nextKey) {\n    var excluded = false;\n    forEach(excludedItems, function (e) {\n      if (SameValue(e, nextKey) === true) {\n        excluded = true;\n      }\n    });\n    var enumerable = $isEnumerable(fromObj, nextKey) || // this is to handle string keys being non-enumerable in older engines\n    typeof source === 'string' && nextKey >= 0 && IsInteger(ToNumber(nextKey));\n\n    if (excluded === false && enumerable) {\n      var propValue = Get(fromObj, nextKey);\n      CreateDataProperty(target, nextKey, propValue);\n    }\n  });\n  return target;\n};","map":{"version":3,"sources":["/Users/sumankaranjit/myProfile/resume/node_modules/es-abstract/2018/CopyDataProperties.js"],"names":["GetIntrinsic","require","$TypeError","callBound","forEach","OwnPropertyKeys","$isEnumerable","CreateDataProperty","Get","IsArray","IsInteger","IsPropertyKey","SameValue","ToNumber","ToObject","Type","module","exports","CopyDataProperties","target","source","excludedItems","i","length","fromObj","sourceKeys","nextKey","excluded","e","enumerable","propValue"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAII,eAAe,GAAGJ,OAAO,CAAC,4BAAD,CAA7B;;AAEA,IAAIK,aAAa,GAAGH,SAAS,CAAC,uCAAD,CAA7B;;AAEA,IAAII,kBAAkB,GAAGN,OAAO,CAAC,sBAAD,CAAhC;;AACA,IAAIO,GAAG,GAAGP,OAAO,CAAC,OAAD,CAAjB;;AACA,IAAIQ,OAAO,GAAGR,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIS,SAAS,GAAGT,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIU,aAAa,GAAGV,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIW,SAAS,GAAGX,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIY,QAAQ,GAAGZ,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIa,QAAQ,GAAGb,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIc,IAAI,GAAGd,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAe,MAAM,CAACC,OAAP,GAAiB,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCC,MAApC,EAA4CC,aAA5C,EAA2D;AAC3E,MAAIN,IAAI,CAACI,MAAD,CAAJ,KAAiB,QAArB,EAA+B;AAC9B,UAAM,IAAIjB,UAAJ,CAAe,8CAAf,CAAN;AACA;;AAED,MAAI,CAACO,OAAO,CAACY,aAAD,CAAZ,EAA6B;AAC5B,UAAM,IAAInB,UAAJ,CAAe,mEAAf,CAAN;AACA;;AACD,OAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,aAAa,CAACE,MAAlC,EAA0CD,CAAC,IAAI,CAA/C,EAAkD;AACjD,QAAI,CAACX,aAAa,CAACU,aAAa,CAACC,CAAD,CAAd,CAAlB,EAAsC;AACrC,YAAM,IAAIpB,UAAJ,CAAe,mEAAf,CAAN;AACA;AACD;;AAED,MAAI,OAAOkB,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,KAAK,IAAhD,EAAsD;AACrD,WAAOD,MAAP;AACA;;AAED,MAAIK,OAAO,GAAGV,QAAQ,CAACM,MAAD,CAAtB;AAEA,MAAIK,UAAU,GAAGpB,eAAe,CAACmB,OAAD,CAAhC;AACApB,EAAAA,OAAO,CAACqB,UAAD,EAAa,UAAUC,OAAV,EAAmB;AACtC,QAAIC,QAAQ,GAAG,KAAf;AAEAvB,IAAAA,OAAO,CAACiB,aAAD,EAAgB,UAAUO,CAAV,EAAa;AACnC,UAAIhB,SAAS,CAACgB,CAAD,EAAIF,OAAJ,CAAT,KAA0B,IAA9B,EAAoC;AACnCC,QAAAA,QAAQ,GAAG,IAAX;AACA;AACD,KAJM,CAAP;AAMA,QAAIE,UAAU,GAAGvB,aAAa,CAACkB,OAAD,EAAUE,OAAV,CAAb,IACjB;AACC,WAAON,MAAP,KAAkB,QAAlB,IACYM,OAAO,IAAI,CADvB,IAEYhB,SAAS,CAACG,QAAQ,CAACa,OAAD,CAAT,CAJtB;;AAMA,QAAIC,QAAQ,KAAK,KAAb,IAAsBE,UAA1B,EAAsC;AACrC,UAAIC,SAAS,GAAGtB,GAAG,CAACgB,OAAD,EAAUE,OAAV,CAAnB;AACAnB,MAAAA,kBAAkB,CAACY,MAAD,EAASO,OAAT,EAAkBI,SAAlB,CAAlB;AACA;AACD,GAnBM,CAAP;AAqBA,SAAOX,MAAP;AACA,CA3CD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('call-bind/callBound');\nvar forEach = require('../helpers/forEach');\nvar OwnPropertyKeys = require('../helpers/OwnPropertyKeys');\n\nvar $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');\n\nvar CreateDataProperty = require('./CreateDataProperty');\nvar Get = require('./Get');\nvar IsArray = require('./IsArray');\nvar IsInteger = require('./IsInteger');\nvar IsPropertyKey = require('./IsPropertyKey');\nvar SameValue = require('./SameValue');\nvar ToNumber = require('./ToNumber');\nvar ToObject = require('./ToObject');\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/9.0/#sec-copydataproperties\n\nmodule.exports = function CopyDataProperties(target, source, excludedItems) {\n\tif (Type(target) !== 'Object') {\n\t\tthrow new $TypeError('Assertion failed: \"target\" must be an Object');\n\t}\n\n\tif (!IsArray(excludedItems)) {\n\t\tthrow new $TypeError('Assertion failed: \"excludedItems\" must be a List of Property Keys');\n\t}\n\tfor (var i = 0; i < excludedItems.length; i += 1) {\n\t\tif (!IsPropertyKey(excludedItems[i])) {\n\t\t\tthrow new $TypeError('Assertion failed: \"excludedItems\" must be a List of Property Keys');\n\t\t}\n\t}\n\n\tif (typeof source === 'undefined' || source === null) {\n\t\treturn target;\n\t}\n\n\tvar fromObj = ToObject(source);\n\n\tvar sourceKeys = OwnPropertyKeys(fromObj);\n\tforEach(sourceKeys, function (nextKey) {\n\t\tvar excluded = false;\n\n\t\tforEach(excludedItems, function (e) {\n\t\t\tif (SameValue(e, nextKey) === true) {\n\t\t\t\texcluded = true;\n\t\t\t}\n\t\t});\n\n\t\tvar enumerable = $isEnumerable(fromObj, nextKey) || (\n\t\t// this is to handle string keys being non-enumerable in older engines\n\t\t\ttypeof source === 'string'\n            && nextKey >= 0\n            && IsInteger(ToNumber(nextKey))\n\t\t);\n\t\tif (excluded === false && enumerable) {\n\t\t\tvar propValue = Get(fromObj, nextKey);\n\t\t\tCreateDataProperty(target, nextKey, propValue);\n\t\t}\n\t});\n\n\treturn target;\n};\n"]},"metadata":{},"sourceType":"script"}