{"ast":null,"code":"/**\n * Wrapper for the toaster (https://github.com/nels-o/toaster)\n */\nvar path = require('path');\n\nvar notifier = path.resolve(__dirname, '../vendor/snoreToast/snoretoast');\n\nvar utils = require('../lib/utils');\n\nvar Balloon = require('./balloon');\n\nvar os = require('os');\n\nconst {\n  v4: uuid\n} = require('uuid');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar fallback;\nconst PIPE_NAME = 'notifierPipe';\nconst PIPE_PATH_PREFIX = '\\\\\\\\.\\\\pipe\\\\';\nmodule.exports = WindowsToaster;\n\nfunction WindowsToaster(options) {\n  options = utils.clone(options || {});\n\n  if (!(this instanceof WindowsToaster)) {\n    return new WindowsToaster(options);\n  }\n\n  this.options = options;\n  EventEmitter.call(this);\n}\n\nutil.inherits(WindowsToaster, EventEmitter);\n\nfunction noop() {}\n\nfunction parseResult(data) {\n  if (!data) {\n    return {};\n  }\n\n  return data.split(';').reduce((acc, cur) => {\n    const split = cur.split('=');\n\n    if (split && split.length === 2) {\n      acc[split[0]] = split[1];\n    }\n\n    return acc;\n  }, {});\n}\n\nfunction getPipeName() {\n  return `${PIPE_PATH_PREFIX}${PIPE_NAME}-${uuid()}`;\n}\n\nfunction notifyRaw(options, callback) {\n  options = utils.clone(options || {});\n  callback = callback || noop;\n  var is64Bit = os.arch() === 'x64';\n  var resultBuffer;\n  const server = {\n    namedPipe: getPipeName()\n  };\n\n  if (typeof options === 'string') {\n    options = {\n      title: 'node-notifier',\n      message: options\n    };\n  }\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('The second argument must be a function callback. You have passed ' + typeof fn);\n  }\n\n  var snoreToastResultParser = (err, callback) => {\n    /* Possible exit statuses from SnoreToast, we only want to include err if it's -1 code\n    Exit Status     :  Exit Code\n    Failed          : -1\n     Success         :  0\n    Hidden          :  1\n    Dismissed       :  2\n    TimedOut        :  3\n    ButtonPressed   :  4\n    TextEntered     :  5\n    */\n    const result = parseResult(resultBuffer && resultBuffer.toString('utf16le')); // parse action\n\n    if (result.action === 'buttonClicked' && result.button) {\n      result.activationType = result.button;\n    } else if (result.action) {\n      result.activationType = result.action;\n    }\n\n    if (err && err.code === -1) {\n      callback(err, result);\n    }\n\n    callback(null, result); // https://github.com/mikaelbr/node-notifier/issues/334\n    // Due to an issue with snoretoast not using stdio and pipe\n    // when notifications are disabled, make sure named pipe server\n    // is closed before exiting.\n\n    server.instance && server.instance.close();\n  };\n\n  var actionJackedCallback = err => snoreToastResultParser(err, utils.actionJackerDecorator(this, options, callback, data => data || false));\n\n  options.title = options.title || 'Node Notification:';\n\n  if (typeof options.message === 'undefined' && typeof options.close === 'undefined') {\n    callback(new Error('Message or ID to close is required.'));\n    return this;\n  }\n\n  if (!utils.isWin8() && !utils.isWSL() && !!this.options.withFallback) {\n    fallback = fallback || new Balloon(this.options);\n    return fallback.notify(options, callback);\n  } // Add pipeName option, to get the output\n\n\n  utils.createNamedPipe(server).then(out => {\n    resultBuffer = out;\n    options.pipeName = server.namedPipe;\n    options = utils.mapToWin8(options);\n    var argsList = utils.constructArgumentList(options, {\n      explicitTrue: true,\n      wrapper: '',\n      keepNewlines: true,\n      noEscape: true\n    });\n    var notifierWithArch = notifier + '-x' + (is64Bit ? '64' : '86') + '.exe';\n    utils.fileCommand(this.options.customPath || notifierWithArch, argsList, actionJackedCallback);\n  });\n  return this;\n}\n\nObject.defineProperty(WindowsToaster.prototype, 'notify', {\n  get: function () {\n    if (!this._notify) this._notify = notifyRaw.bind(this);\n    return this._notify;\n  }\n});","map":{"version":3,"sources":["/Users/sumankaranjit/myProfile/resume/node_modules/node-notifier/notifiers/toaster.js"],"names":["path","require","notifier","resolve","__dirname","utils","Balloon","os","v4","uuid","EventEmitter","util","fallback","PIPE_NAME","PIPE_PATH_PREFIX","module","exports","WindowsToaster","options","clone","call","inherits","noop","parseResult","data","split","reduce","acc","cur","length","getPipeName","notifyRaw","callback","is64Bit","arch","resultBuffer","server","namedPipe","title","message","TypeError","fn","snoreToastResultParser","err","result","toString","action","button","activationType","code","instance","close","actionJackedCallback","actionJackerDecorator","Error","isWin8","isWSL","withFallback","notify","createNamedPipe","then","out","pipeName","mapToWin8","argsList","constructArgumentList","explicitTrue","wrapper","keepNewlines","noEscape","notifierWithArch","fileCommand","customPath","Object","defineProperty","prototype","get","_notify","bind"],"mappings":"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","sourcesContent":["/**\n * Wrapper for the toaster (https://github.com/nels-o/toaster)\n */\nvar path = require('path');\nvar notifier = path.resolve(__dirname, '../vendor/snoreToast/snoretoast');\nvar utils = require('../lib/utils');\nvar Balloon = require('./balloon');\nvar os = require('os');\nconst { v4: uuid } = require('uuid');\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nvar fallback;\n\nconst PIPE_NAME = 'notifierPipe';\nconst PIPE_PATH_PREFIX = '\\\\\\\\.\\\\pipe\\\\';\n\nmodule.exports = WindowsToaster;\n\nfunction WindowsToaster(options) {\n  options = utils.clone(options || {});\n  if (!(this instanceof WindowsToaster)) {\n    return new WindowsToaster(options);\n  }\n\n  this.options = options;\n\n  EventEmitter.call(this);\n}\nutil.inherits(WindowsToaster, EventEmitter);\n\nfunction noop() {}\n\nfunction parseResult(data) {\n  if (!data) {\n    return {};\n  }\n  return data.split(';').reduce((acc, cur) => {\n    const split = cur.split('=');\n    if (split && split.length === 2) {\n      acc[split[0]] = split[1];\n    }\n    return acc;\n  }, {});\n}\n\nfunction getPipeName() {\n  return `${PIPE_PATH_PREFIX}${PIPE_NAME}-${uuid()}`;\n}\n\nfunction notifyRaw(options, callback) {\n  options = utils.clone(options || {});\n  callback = callback || noop;\n  var is64Bit = os.arch() === 'x64';\n  var resultBuffer;\n  const server = {\n    namedPipe: getPipeName()\n  };\n\n  if (typeof options === 'string') {\n    options = { title: 'node-notifier', message: options };\n  }\n\n  if (typeof callback !== 'function') {\n    throw new TypeError(\n      'The second argument must be a function callback. You have passed ' +\n        typeof fn\n    );\n  }\n\n  var snoreToastResultParser = (err, callback) => {\n    /* Possible exit statuses from SnoreToast, we only want to include err if it's -1 code\n    Exit Status     :  Exit Code\n    Failed          : -1\n\n    Success         :  0\n    Hidden          :  1\n    Dismissed       :  2\n    TimedOut        :  3\n    ButtonPressed   :  4\n    TextEntered     :  5\n    */\n    const result = parseResult(\n      resultBuffer && resultBuffer.toString('utf16le')\n    );\n\n    // parse action\n    if (result.action === 'buttonClicked' && result.button) {\n      result.activationType = result.button;\n    } else if (result.action) {\n      result.activationType = result.action;\n    }\n\n    if (err && err.code === -1) {\n      callback(err, result);\n    }\n    callback(null, result);\n\n    // https://github.com/mikaelbr/node-notifier/issues/334\n    // Due to an issue with snoretoast not using stdio and pipe\n    // when notifications are disabled, make sure named pipe server\n    // is closed before exiting.\n    server.instance && server.instance.close();\n  };\n\n  var actionJackedCallback = (err) =>\n    snoreToastResultParser(\n      err,\n      utils.actionJackerDecorator(\n        this,\n        options,\n        callback,\n        (data) => data || false\n      )\n    );\n\n  options.title = options.title || 'Node Notification:';\n  if (\n    typeof options.message === 'undefined' &&\n    typeof options.close === 'undefined'\n  ) {\n    callback(new Error('Message or ID to close is required.'));\n    return this;\n  }\n\n  if (!utils.isWin8() && !utils.isWSL() && !!this.options.withFallback) {\n    fallback = fallback || new Balloon(this.options);\n    return fallback.notify(options, callback);\n  }\n\n  // Add pipeName option, to get the output\n  utils.createNamedPipe(server).then((out) => {\n    resultBuffer = out;\n    options.pipeName = server.namedPipe;\n\n    options = utils.mapToWin8(options);\n    var argsList = utils.constructArgumentList(options, {\n      explicitTrue: true,\n      wrapper: '',\n      keepNewlines: true,\n      noEscape: true\n    });\n\n    var notifierWithArch = notifier + '-x' + (is64Bit ? '64' : '86') + '.exe';\n    utils.fileCommand(\n      this.options.customPath || notifierWithArch,\n      argsList,\n      actionJackedCallback\n    );\n  });\n  return this;\n}\n\nObject.defineProperty(WindowsToaster.prototype, 'notify', {\n  get: function () {\n    if (!this._notify) this._notify = notifyRaw.bind(this);\n    return this._notify;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}