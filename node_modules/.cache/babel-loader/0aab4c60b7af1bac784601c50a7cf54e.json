{"ast":null,"code":"'use strict';\n\nconst os = require('os');\n\nconst fs = require('fs');\n\nconst isDocker = require('is-docker');\n\nconst isWsl = () => {\n  if (process.platform !== 'linux') {\n    return false;\n  }\n\n  if (os.release().toLowerCase().includes('microsoft')) {\n    if (isDocker()) {\n      return false;\n    }\n\n    return true;\n  }\n\n  try {\n    return fs.readFileSync('/proc/version', 'utf8').toLowerCase().includes('microsoft') ? !isDocker() : false;\n  } catch (_) {\n    return false;\n  }\n};\n\nif (process.env.__IS_WSL_TEST__) {\n  module.exports = isWsl;\n} else {\n  module.exports = isWsl();\n}","map":{"version":3,"sources":["/Users/sumankaranjit/myProfile/resume/node_modules/is-wsl/index.js"],"names":["os","require","fs","isDocker","isWsl","process","platform","release","toLowerCase","includes","readFileSync","_","env","__IS_WSL_TEST__","module","exports"],"mappings":"AAAA;;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAxB;;AAEA,MAAMG,KAAK,GAAG,MAAM;AACnB,MAAIC,OAAO,CAACC,QAAR,KAAqB,OAAzB,EAAkC;AACjC,WAAO,KAAP;AACA;;AAED,MAAIN,EAAE,CAACO,OAAH,GAAaC,WAAb,GAA2BC,QAA3B,CAAoC,WAApC,CAAJ,EAAsD;AACrD,QAAIN,QAAQ,EAAZ,EAAgB;AACf,aAAO,KAAP;AACA;;AAED,WAAO,IAAP;AACA;;AAED,MAAI;AACH,WAAOD,EAAE,CAACQ,YAAH,CAAgB,eAAhB,EAAiC,MAAjC,EAAyCF,WAAzC,GAAuDC,QAAvD,CAAgE,WAAhE,IACN,CAACN,QAAQ,EADH,GACQ,KADf;AAEA,GAHD,CAGE,OAAOQ,CAAP,EAAU;AACX,WAAO,KAAP;AACA;AACD,CAnBD;;AAqBA,IAAIN,OAAO,CAACO,GAAR,CAAYC,eAAhB,EAAiC;AAChCC,EAAAA,MAAM,CAACC,OAAP,GAAiBX,KAAjB;AACA,CAFD,MAEO;AACNU,EAAAA,MAAM,CAACC,OAAP,GAAiBX,KAAK,EAAtB;AACA","sourcesContent":["'use strict';\nconst os = require('os');\nconst fs = require('fs');\nconst isDocker = require('is-docker');\n\nconst isWsl = () => {\n\tif (process.platform !== 'linux') {\n\t\treturn false;\n\t}\n\n\tif (os.release().toLowerCase().includes('microsoft')) {\n\t\tif (isDocker()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\ttry {\n\t\treturn fs.readFileSync('/proc/version', 'utf8').toLowerCase().includes('microsoft') ?\n\t\t\t!isDocker() : false;\n\t} catch (_) {\n\t\treturn false;\n\t}\n};\n\nif (process.env.__IS_WSL_TEST__) {\n\tmodule.exports = isWsl;\n} else {\n\tmodule.exports = isWsl();\n}\n"]},"metadata":{},"sourceType":"script"}