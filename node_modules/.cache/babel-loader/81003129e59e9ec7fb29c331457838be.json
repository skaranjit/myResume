{"ast":null,"code":"/**\n * Node.js wrapper for \"notify-send\".\n */\nvar os = require('os');\n\nvar which = require('which');\n\nvar utils = require('../lib/utils');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar notifier = 'notify-send';\nvar hasNotifier;\nmodule.exports = NotifySend;\n\nfunction NotifySend(options) {\n  options = utils.clone(options || {});\n\n  if (!(this instanceof NotifySend)) {\n    return new NotifySend(options);\n  }\n\n  this.options = options;\n  EventEmitter.call(this);\n}\n\nutil.inherits(NotifySend, EventEmitter);\n\nfunction noop() {}\n\nfunction notifyRaw(options, callback) {\n  options = utils.clone(options || {});\n  callback = callback || noop;\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('The second argument must be a function callback. You have passed ' + typeof callback);\n  }\n\n  if (typeof options === 'string') {\n    options = {\n      title: 'node-notifier',\n      message: options\n    };\n  }\n\n  if (!options.message) {\n    callback(new Error('Message is required.'));\n    return this;\n  }\n\n  if (os.type() !== 'Linux' && !os.type().match(/BSD$/)) {\n    callback(new Error('Only supported on Linux and *BSD systems'));\n    return this;\n  }\n\n  if (hasNotifier === false) {\n    callback(new Error('notify-send must be installed on the system.'));\n    return this;\n  }\n\n  if (hasNotifier || !!this.options.suppressOsdCheck) {\n    doNotification(options, callback);\n    return this;\n  }\n\n  try {\n    hasNotifier = !!which.sync(notifier);\n    doNotification(options, callback);\n  } catch (err) {\n    hasNotifier = false;\n    return callback(err);\n  }\n\n  return this;\n}\n\nObject.defineProperty(NotifySend.prototype, 'notify', {\n  get: function () {\n    if (!this._notify) this._notify = notifyRaw.bind(this);\n    return this._notify;\n  }\n});\nvar allowedArguments = ['urgency', 'expire-time', 'icon', 'category', 'hint', 'app-name'];\n\nfunction doNotification(options, callback) {\n  var initial, argsList;\n  options = utils.mapToNotifySend(options);\n  options.title = options.title || 'Node Notification:';\n  initial = [options.title, options.message];\n  delete options.title;\n  delete options.message;\n  argsList = utils.constructArgumentList(options, {\n    initial: initial,\n    keyExtra: '-',\n    allowedArguments: allowedArguments\n  });\n  utils.command(notifier, argsList, callback);\n}","map":{"version":3,"sources":["/Users/sumankaranjit/myProfile/resume/node_modules/node-notifier/notifiers/notifysend.js"],"names":["os","require","which","utils","EventEmitter","util","notifier","hasNotifier","module","exports","NotifySend","options","clone","call","inherits","noop","notifyRaw","callback","TypeError","title","message","Error","type","match","suppressOsdCheck","doNotification","sync","err","Object","defineProperty","prototype","get","_notify","bind","allowedArguments","initial","argsList","mapToNotifySend","constructArgumentList","keyExtra","command"],"mappings":"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","sourcesContent":["/**\n * Node.js wrapper for \"notify-send\".\n */\nvar os = require('os');\nvar which = require('which');\nvar utils = require('../lib/utils');\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nvar notifier = 'notify-send';\nvar hasNotifier;\n\nmodule.exports = NotifySend;\n\nfunction NotifySend(options) {\n  options = utils.clone(options || {});\n  if (!(this instanceof NotifySend)) {\n    return new NotifySend(options);\n  }\n\n  this.options = options;\n\n  EventEmitter.call(this);\n}\nutil.inherits(NotifySend, EventEmitter);\n\nfunction noop() {}\nfunction notifyRaw(options, callback) {\n  options = utils.clone(options || {});\n  callback = callback || noop;\n\n  if (typeof callback !== 'function') {\n    throw new TypeError(\n      'The second argument must be a function callback. You have passed ' +\n        typeof callback\n    );\n  }\n\n  if (typeof options === 'string') {\n    options = { title: 'node-notifier', message: options };\n  }\n\n  if (!options.message) {\n    callback(new Error('Message is required.'));\n    return this;\n  }\n\n  if (os.type() !== 'Linux' && !os.type().match(/BSD$/)) {\n    callback(new Error('Only supported on Linux and *BSD systems'));\n    return this;\n  }\n\n  if (hasNotifier === false) {\n    callback(new Error('notify-send must be installed on the system.'));\n    return this;\n  }\n\n  if (hasNotifier || !!this.options.suppressOsdCheck) {\n    doNotification(options, callback);\n    return this;\n  }\n\n  try {\n    hasNotifier = !!which.sync(notifier);\n    doNotification(options, callback);\n  } catch (err) {\n    hasNotifier = false;\n    return callback(err);\n  }\n\n  return this;\n}\n\nObject.defineProperty(NotifySend.prototype, 'notify', {\n  get: function() {\n    if (!this._notify) this._notify = notifyRaw.bind(this);\n    return this._notify;\n  }\n});\n\nvar allowedArguments = ['urgency', 'expire-time', 'icon', 'category', 'hint', 'app-name'];\n\nfunction doNotification(options, callback) {\n  var initial, argsList;\n\n  options = utils.mapToNotifySend(options);\n  options.title = options.title || 'Node Notification:';\n\n  initial = [options.title, options.message];\n  delete options.title;\n  delete options.message;\n\n  argsList = utils.constructArgumentList(options, {\n    initial: initial,\n    keyExtra: '-',\n    allowedArguments: allowedArguments\n  });\n\n  utils.command(notifier, argsList, callback);\n}\n"]},"metadata":{},"sourceType":"script"}