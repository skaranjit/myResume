{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar has = require('has');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar getSymbolDescription = require('../helpers/getSymbolDescription');\n\nvar DefinePropertyOrThrow = require('./DefinePropertyOrThrow');\n\nvar IsExtensible = require('./IsExtensible');\n\nvar Type = require('./Type'); // https://ecma-international.org/ecma-262/6.0/#sec-setfunctionname\n\n\nmodule.exports = function SetFunctionName(F, name) {\n  if (typeof F !== 'function') {\n    throw new $TypeError('Assertion failed: `F` must be a function');\n  }\n\n  if (!IsExtensible(F) || has(F, 'name')) {\n    throw new $TypeError('Assertion failed: `F` must be extensible, and must not have a `name` own property');\n  }\n\n  var nameType = Type(name);\n\n  if (nameType !== 'Symbol' && nameType !== 'String') {\n    throw new $TypeError('Assertion failed: `name` must be a Symbol or a String');\n  }\n\n  if (nameType === 'Symbol') {\n    var description = getSymbolDescription(name); // eslint-disable-next-line no-param-reassign\n\n    name = typeof description === 'undefined' ? '' : '[' + description + ']';\n  }\n\n  if (arguments.length > 2) {\n    var prefix = arguments[2]; // eslint-disable-next-line no-param-reassign\n\n    name = prefix + ' ' + name;\n  }\n\n  return DefinePropertyOrThrow(F, 'name', {\n    '[[Value]]': name,\n    '[[Writable]]': false,\n    '[[Enumerable]]': false,\n    '[[Configurable]]': true\n  });\n};","map":{"version":3,"sources":["/Users/sumankaranjit/myProfile/resume/node_modules/es-abstract/2018/SetFunctionName.js"],"names":["GetIntrinsic","require","has","$TypeError","getSymbolDescription","DefinePropertyOrThrow","IsExtensible","Type","module","exports","SetFunctionName","F","name","nameType","description","arguments","length","prefix"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,GAAG,GAAGD,OAAO,CAAC,KAAD,CAAjB;;AAEA,IAAIE,UAAU,GAAGH,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAII,oBAAoB,GAAGH,OAAO,CAAC,iCAAD,CAAlC;;AAEA,IAAII,qBAAqB,GAAGJ,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIK,YAAY,GAAGL,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIM,IAAI,GAAGN,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAO,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,CAAzB,EAA4BC,IAA5B,EAAkC;AAClD,MAAI,OAAOD,CAAP,KAAa,UAAjB,EAA6B;AAC5B,UAAM,IAAIR,UAAJ,CAAe,0CAAf,CAAN;AACA;;AACD,MAAI,CAACG,YAAY,CAACK,CAAD,CAAb,IAAoBT,GAAG,CAACS,CAAD,EAAI,MAAJ,CAA3B,EAAwC;AACvC,UAAM,IAAIR,UAAJ,CAAe,mFAAf,CAAN;AACA;;AACD,MAAIU,QAAQ,GAAGN,IAAI,CAACK,IAAD,CAAnB;;AACA,MAAIC,QAAQ,KAAK,QAAb,IAAyBA,QAAQ,KAAK,QAA1C,EAAoD;AACnD,UAAM,IAAIV,UAAJ,CAAe,uDAAf,CAAN;AACA;;AACD,MAAIU,QAAQ,KAAK,QAAjB,EAA2B;AAC1B,QAAIC,WAAW,GAAGV,oBAAoB,CAACQ,IAAD,CAAtC,CAD0B,CAE1B;;AACAA,IAAAA,IAAI,GAAG,OAAOE,WAAP,KAAuB,WAAvB,GAAqC,EAArC,GAA0C,MAAMA,WAAN,GAAoB,GAArE;AACA;;AACD,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACzB,QAAIC,MAAM,GAAGF,SAAS,CAAC,CAAD,CAAtB,CADyB,CAEzB;;AACAH,IAAAA,IAAI,GAAGK,MAAM,GAAG,GAAT,GAAeL,IAAtB;AACA;;AACD,SAAOP,qBAAqB,CAACM,CAAD,EAAI,MAAJ,EAAY;AACvC,iBAAaC,IAD0B;AAEvC,oBAAgB,KAFuB;AAGvC,sBAAkB,KAHqB;AAIvC,wBAAoB;AAJmB,GAAZ,CAA5B;AAMA,CA3BD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar has = require('has');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar getSymbolDescription = require('../helpers/getSymbolDescription');\n\nvar DefinePropertyOrThrow = require('./DefinePropertyOrThrow');\nvar IsExtensible = require('./IsExtensible');\nvar Type = require('./Type');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-setfunctionname\n\nmodule.exports = function SetFunctionName(F, name) {\n\tif (typeof F !== 'function') {\n\t\tthrow new $TypeError('Assertion failed: `F` must be a function');\n\t}\n\tif (!IsExtensible(F) || has(F, 'name')) {\n\t\tthrow new $TypeError('Assertion failed: `F` must be extensible, and must not have a `name` own property');\n\t}\n\tvar nameType = Type(name);\n\tif (nameType !== 'Symbol' && nameType !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `name` must be a Symbol or a String');\n\t}\n\tif (nameType === 'Symbol') {\n\t\tvar description = getSymbolDescription(name);\n\t\t// eslint-disable-next-line no-param-reassign\n\t\tname = typeof description === 'undefined' ? '' : '[' + description + ']';\n\t}\n\tif (arguments.length > 2) {\n\t\tvar prefix = arguments[2];\n\t\t// eslint-disable-next-line no-param-reassign\n\t\tname = prefix + ' ' + name;\n\t}\n\treturn DefinePropertyOrThrow(F, 'name', {\n\t\t'[[Value]]': name,\n\t\t'[[Writable]]': false,\n\t\t'[[Enumerable]]': false,\n\t\t'[[Configurable]]': true\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}